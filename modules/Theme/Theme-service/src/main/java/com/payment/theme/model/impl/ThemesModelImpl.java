/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.payment.theme.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.payment.theme.model.Themes;
import com.payment.theme.model.ThemesModel;
import com.payment.theme.model.ThemesSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Themes service. Represents a row in the &quot;THEMES_Themes&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ThemesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ThemesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ThemesImpl
 * @generated
 */
@JSON(strict = true)
public class ThemesModelImpl
	extends BaseModelImpl<Themes> implements ThemesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a themes model instance should use the <code>Themes</code> interface instead.
	 */
	public static final String TABLE_NAME = "THEMES_Themes";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"colorsId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"neutralBlack", Types.VARCHAR},
		{"neutralWhite", Types.VARCHAR}, {"neutralGray1", Types.VARCHAR},
		{"primaryBg", Types.VARCHAR}, {"primaryLight", Types.VARCHAR},
		{"primaryDark", Types.VARCHAR}, {"primaryDefault", Types.VARCHAR},
		{"primaryDisabled", Types.VARCHAR}, {"secondaryBg", Types.VARCHAR},
		{"secondaryLight", Types.VARCHAR}, {"secondaryDark", Types.VARCHAR},
		{"secondaryDefault", Types.VARCHAR},
		{"secondaryDisabled", Types.VARCHAR}, {"successBg", Types.VARCHAR},
		{"successLight", Types.VARCHAR}, {"successDark", Types.VARCHAR},
		{"successDefault", Types.VARCHAR}, {"successDisabled", Types.VARCHAR},
		{"errorBg", Types.VARCHAR}, {"errorLight", Types.VARCHAR},
		{"errorDark", Types.VARCHAR}, {"errorDefault", Types.VARCHAR},
		{"errorDisabled", Types.VARCHAR}, {"warningBg", Types.VARCHAR},
		{"warningLight", Types.VARCHAR}, {"warningDark", Types.VARCHAR},
		{"warningDefault", Types.VARCHAR}, {"warningDisabled", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("colorsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("neutralBlack", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("neutralWhite", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("neutralGray1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryBg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryLight", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryDark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryDefault", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryDisabled", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryBg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryLight", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryDark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryDefault", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("secondaryDisabled", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("successBg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("successLight", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("successDark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("successDefault", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("successDisabled", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("errorBg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("errorLight", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("errorDark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("errorDefault", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("errorDisabled", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("warningBg", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("warningLight", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("warningDark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("warningDefault", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("warningDisabled", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table THEMES_Themes (uuid_ VARCHAR(75) null,colorsId LONG not null primary key,userId LONG,neutralBlack VARCHAR(75) null,neutralWhite VARCHAR(75) null,neutralGray1 VARCHAR(75) null,primaryBg VARCHAR(75) null,primaryLight VARCHAR(75) null,primaryDark VARCHAR(75) null,primaryDefault VARCHAR(75) null,primaryDisabled VARCHAR(75) null,secondaryBg VARCHAR(75) null,secondaryLight VARCHAR(75) null,secondaryDark VARCHAR(75) null,secondaryDefault VARCHAR(75) null,secondaryDisabled VARCHAR(75) null,successBg VARCHAR(75) null,successLight VARCHAR(75) null,successDark VARCHAR(75) null,successDefault VARCHAR(75) null,successDisabled VARCHAR(75) null,errorBg VARCHAR(75) null,errorLight VARCHAR(75) null,errorDark VARCHAR(75) null,errorDefault VARCHAR(75) null,errorDisabled VARCHAR(75) null,warningBg VARCHAR(75) null,warningLight VARCHAR(75) null,warningDark VARCHAR(75) null,warningDefault VARCHAR(75) null,warningDisabled VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table THEMES_Themes";

	public static final String ORDER_BY_JPQL = " ORDER BY themes.colorsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY THEMES_Themes.colorsId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COLORSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Themes toModel(ThemesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Themes model = new ThemesImpl();

		model.setUuid(soapModel.getUuid());
		model.setColorsId(soapModel.getColorsId());
		model.setUserId(soapModel.getUserId());
		model.setNeutralBlack(soapModel.getNeutralBlack());
		model.setNeutralWhite(soapModel.getNeutralWhite());
		model.setNeutralGray1(soapModel.getNeutralGray1());
		model.setPrimaryBg(soapModel.getPrimaryBg());
		model.setPrimaryLight(soapModel.getPrimaryLight());
		model.setPrimaryDark(soapModel.getPrimaryDark());
		model.setPrimaryDefault(soapModel.getPrimaryDefault());
		model.setPrimaryDisabled(soapModel.getPrimaryDisabled());
		model.setSecondaryBg(soapModel.getSecondaryBg());
		model.setSecondaryLight(soapModel.getSecondaryLight());
		model.setSecondaryDark(soapModel.getSecondaryDark());
		model.setSecondaryDefault(soapModel.getSecondaryDefault());
		model.setSecondaryDisabled(soapModel.getSecondaryDisabled());
		model.setSuccessBg(soapModel.getSuccessBg());
		model.setSuccessLight(soapModel.getSuccessLight());
		model.setSuccessDark(soapModel.getSuccessDark());
		model.setSuccessDefault(soapModel.getSuccessDefault());
		model.setSuccessDisabled(soapModel.getSuccessDisabled());
		model.setErrorBg(soapModel.getErrorBg());
		model.setErrorLight(soapModel.getErrorLight());
		model.setErrorDark(soapModel.getErrorDark());
		model.setErrorDefault(soapModel.getErrorDefault());
		model.setErrorDisabled(soapModel.getErrorDisabled());
		model.setWarningBg(soapModel.getWarningBg());
		model.setWarningLight(soapModel.getWarningLight());
		model.setWarningDark(soapModel.getWarningDark());
		model.setWarningDefault(soapModel.getWarningDefault());
		model.setWarningDisabled(soapModel.getWarningDisabled());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Themes> toModels(ThemesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Themes> models = new ArrayList<Themes>(soapModels.length);

		for (ThemesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ThemesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _colorsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setColorsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _colorsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Themes.class;
	}

	@Override
	public String getModelClassName() {
		return Themes.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Themes, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Themes, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Themes, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Themes)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Themes, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Themes, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Themes)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Themes, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Themes, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Themes>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Themes.class.getClassLoader(), Themes.class, ModelWrapper.class);

		try {
			Constructor<Themes> constructor =
				(Constructor<Themes>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Themes, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Themes, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Themes, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Themes, Object>>();
		Map<String, BiConsumer<Themes, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Themes, ?>>();

		attributeGetterFunctions.put("uuid", Themes::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Themes, String>)Themes::setUuid);
		attributeGetterFunctions.put("colorsId", Themes::getColorsId);
		attributeSetterBiConsumers.put(
			"colorsId", (BiConsumer<Themes, Long>)Themes::setColorsId);
		attributeGetterFunctions.put("userId", Themes::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Themes, Long>)Themes::setUserId);
		attributeGetterFunctions.put("neutralBlack", Themes::getNeutralBlack);
		attributeSetterBiConsumers.put(
			"neutralBlack",
			(BiConsumer<Themes, String>)Themes::setNeutralBlack);
		attributeGetterFunctions.put("neutralWhite", Themes::getNeutralWhite);
		attributeSetterBiConsumers.put(
			"neutralWhite",
			(BiConsumer<Themes, String>)Themes::setNeutralWhite);
		attributeGetterFunctions.put("neutralGray1", Themes::getNeutralGray1);
		attributeSetterBiConsumers.put(
			"neutralGray1",
			(BiConsumer<Themes, String>)Themes::setNeutralGray1);
		attributeGetterFunctions.put("primaryBg", Themes::getPrimaryBg);
		attributeSetterBiConsumers.put(
			"primaryBg", (BiConsumer<Themes, String>)Themes::setPrimaryBg);
		attributeGetterFunctions.put("primaryLight", Themes::getPrimaryLight);
		attributeSetterBiConsumers.put(
			"primaryLight",
			(BiConsumer<Themes, String>)Themes::setPrimaryLight);
		attributeGetterFunctions.put("primaryDark", Themes::getPrimaryDark);
		attributeSetterBiConsumers.put(
			"primaryDark", (BiConsumer<Themes, String>)Themes::setPrimaryDark);
		attributeGetterFunctions.put(
			"primaryDefault", Themes::getPrimaryDefault);
		attributeSetterBiConsumers.put(
			"primaryDefault",
			(BiConsumer<Themes, String>)Themes::setPrimaryDefault);
		attributeGetterFunctions.put(
			"primaryDisabled", Themes::getPrimaryDisabled);
		attributeSetterBiConsumers.put(
			"primaryDisabled",
			(BiConsumer<Themes, String>)Themes::setPrimaryDisabled);
		attributeGetterFunctions.put("secondaryBg", Themes::getSecondaryBg);
		attributeSetterBiConsumers.put(
			"secondaryBg", (BiConsumer<Themes, String>)Themes::setSecondaryBg);
		attributeGetterFunctions.put(
			"secondaryLight", Themes::getSecondaryLight);
		attributeSetterBiConsumers.put(
			"secondaryLight",
			(BiConsumer<Themes, String>)Themes::setSecondaryLight);
		attributeGetterFunctions.put("secondaryDark", Themes::getSecondaryDark);
		attributeSetterBiConsumers.put(
			"secondaryDark",
			(BiConsumer<Themes, String>)Themes::setSecondaryDark);
		attributeGetterFunctions.put(
			"secondaryDefault", Themes::getSecondaryDefault);
		attributeSetterBiConsumers.put(
			"secondaryDefault",
			(BiConsumer<Themes, String>)Themes::setSecondaryDefault);
		attributeGetterFunctions.put(
			"secondaryDisabled", Themes::getSecondaryDisabled);
		attributeSetterBiConsumers.put(
			"secondaryDisabled",
			(BiConsumer<Themes, String>)Themes::setSecondaryDisabled);
		attributeGetterFunctions.put("successBg", Themes::getSuccessBg);
		attributeSetterBiConsumers.put(
			"successBg", (BiConsumer<Themes, String>)Themes::setSuccessBg);
		attributeGetterFunctions.put("successLight", Themes::getSuccessLight);
		attributeSetterBiConsumers.put(
			"successLight",
			(BiConsumer<Themes, String>)Themes::setSuccessLight);
		attributeGetterFunctions.put("successDark", Themes::getSuccessDark);
		attributeSetterBiConsumers.put(
			"successDark", (BiConsumer<Themes, String>)Themes::setSuccessDark);
		attributeGetterFunctions.put(
			"successDefault", Themes::getSuccessDefault);
		attributeSetterBiConsumers.put(
			"successDefault",
			(BiConsumer<Themes, String>)Themes::setSuccessDefault);
		attributeGetterFunctions.put(
			"successDisabled", Themes::getSuccessDisabled);
		attributeSetterBiConsumers.put(
			"successDisabled",
			(BiConsumer<Themes, String>)Themes::setSuccessDisabled);
		attributeGetterFunctions.put("errorBg", Themes::getErrorBg);
		attributeSetterBiConsumers.put(
			"errorBg", (BiConsumer<Themes, String>)Themes::setErrorBg);
		attributeGetterFunctions.put("errorLight", Themes::getErrorLight);
		attributeSetterBiConsumers.put(
			"errorLight", (BiConsumer<Themes, String>)Themes::setErrorLight);
		attributeGetterFunctions.put("errorDark", Themes::getErrorDark);
		attributeSetterBiConsumers.put(
			"errorDark", (BiConsumer<Themes, String>)Themes::setErrorDark);
		attributeGetterFunctions.put("errorDefault", Themes::getErrorDefault);
		attributeSetterBiConsumers.put(
			"errorDefault",
			(BiConsumer<Themes, String>)Themes::setErrorDefault);
		attributeGetterFunctions.put("errorDisabled", Themes::getErrorDisabled);
		attributeSetterBiConsumers.put(
			"errorDisabled",
			(BiConsumer<Themes, String>)Themes::setErrorDisabled);
		attributeGetterFunctions.put("warningBg", Themes::getWarningBg);
		attributeSetterBiConsumers.put(
			"warningBg", (BiConsumer<Themes, String>)Themes::setWarningBg);
		attributeGetterFunctions.put("warningLight", Themes::getWarningLight);
		attributeSetterBiConsumers.put(
			"warningLight",
			(BiConsumer<Themes, String>)Themes::setWarningLight);
		attributeGetterFunctions.put("warningDark", Themes::getWarningDark);
		attributeSetterBiConsumers.put(
			"warningDark", (BiConsumer<Themes, String>)Themes::setWarningDark);
		attributeGetterFunctions.put(
			"warningDefault", Themes::getWarningDefault);
		attributeSetterBiConsumers.put(
			"warningDefault",
			(BiConsumer<Themes, String>)Themes::setWarningDefault);
		attributeGetterFunctions.put(
			"warningDisabled", Themes::getWarningDisabled);
		attributeSetterBiConsumers.put(
			"warningDisabled",
			(BiConsumer<Themes, String>)Themes::setWarningDisabled);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getColorsId() {
		return _colorsId;
	}

	@Override
	public void setColorsId(long colorsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_colorsId = colorsId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getNeutralBlack() {
		if (_neutralBlack == null) {
			return "";
		}
		else {
			return _neutralBlack;
		}
	}

	@Override
	public void setNeutralBlack(String neutralBlack) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_neutralBlack = neutralBlack;
	}

	@JSON
	@Override
	public String getNeutralWhite() {
		if (_neutralWhite == null) {
			return "";
		}
		else {
			return _neutralWhite;
		}
	}

	@Override
	public void setNeutralWhite(String neutralWhite) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_neutralWhite = neutralWhite;
	}

	@JSON
	@Override
	public String getNeutralGray1() {
		if (_neutralGray1 == null) {
			return "";
		}
		else {
			return _neutralGray1;
		}
	}

	@Override
	public void setNeutralGray1(String neutralGray1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_neutralGray1 = neutralGray1;
	}

	@JSON
	@Override
	public String getPrimaryBg() {
		if (_primaryBg == null) {
			return "";
		}
		else {
			return _primaryBg;
		}
	}

	@Override
	public void setPrimaryBg(String primaryBg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_primaryBg = primaryBg;
	}

	@JSON
	@Override
	public String getPrimaryLight() {
		if (_primaryLight == null) {
			return "";
		}
		else {
			return _primaryLight;
		}
	}

	@Override
	public void setPrimaryLight(String primaryLight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_primaryLight = primaryLight;
	}

	@JSON
	@Override
	public String getPrimaryDark() {
		if (_primaryDark == null) {
			return "";
		}
		else {
			return _primaryDark;
		}
	}

	@Override
	public void setPrimaryDark(String primaryDark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_primaryDark = primaryDark;
	}

	@JSON
	@Override
	public String getPrimaryDefault() {
		if (_primaryDefault == null) {
			return "";
		}
		else {
			return _primaryDefault;
		}
	}

	@Override
	public void setPrimaryDefault(String primaryDefault) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_primaryDefault = primaryDefault;
	}

	@JSON
	@Override
	public String getPrimaryDisabled() {
		if (_primaryDisabled == null) {
			return "";
		}
		else {
			return _primaryDisabled;
		}
	}

	@Override
	public void setPrimaryDisabled(String primaryDisabled) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_primaryDisabled = primaryDisabled;
	}

	@JSON
	@Override
	public String getSecondaryBg() {
		if (_secondaryBg == null) {
			return "";
		}
		else {
			return _secondaryBg;
		}
	}

	@Override
	public void setSecondaryBg(String secondaryBg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondaryBg = secondaryBg;
	}

	@JSON
	@Override
	public String getSecondaryLight() {
		if (_secondaryLight == null) {
			return "";
		}
		else {
			return _secondaryLight;
		}
	}

	@Override
	public void setSecondaryLight(String secondaryLight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondaryLight = secondaryLight;
	}

	@JSON
	@Override
	public String getSecondaryDark() {
		if (_secondaryDark == null) {
			return "";
		}
		else {
			return _secondaryDark;
		}
	}

	@Override
	public void setSecondaryDark(String secondaryDark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondaryDark = secondaryDark;
	}

	@JSON
	@Override
	public String getSecondaryDefault() {
		if (_secondaryDefault == null) {
			return "";
		}
		else {
			return _secondaryDefault;
		}
	}

	@Override
	public void setSecondaryDefault(String secondaryDefault) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondaryDefault = secondaryDefault;
	}

	@JSON
	@Override
	public String getSecondaryDisabled() {
		if (_secondaryDisabled == null) {
			return "";
		}
		else {
			return _secondaryDisabled;
		}
	}

	@Override
	public void setSecondaryDisabled(String secondaryDisabled) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_secondaryDisabled = secondaryDisabled;
	}

	@JSON
	@Override
	public String getSuccessBg() {
		if (_successBg == null) {
			return "";
		}
		else {
			return _successBg;
		}
	}

	@Override
	public void setSuccessBg(String successBg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_successBg = successBg;
	}

	@JSON
	@Override
	public String getSuccessLight() {
		if (_successLight == null) {
			return "";
		}
		else {
			return _successLight;
		}
	}

	@Override
	public void setSuccessLight(String successLight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_successLight = successLight;
	}

	@JSON
	@Override
	public String getSuccessDark() {
		if (_successDark == null) {
			return "";
		}
		else {
			return _successDark;
		}
	}

	@Override
	public void setSuccessDark(String successDark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_successDark = successDark;
	}

	@JSON
	@Override
	public String getSuccessDefault() {
		if (_successDefault == null) {
			return "";
		}
		else {
			return _successDefault;
		}
	}

	@Override
	public void setSuccessDefault(String successDefault) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_successDefault = successDefault;
	}

	@JSON
	@Override
	public String getSuccessDisabled() {
		if (_successDisabled == null) {
			return "";
		}
		else {
			return _successDisabled;
		}
	}

	@Override
	public void setSuccessDisabled(String successDisabled) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_successDisabled = successDisabled;
	}

	@JSON
	@Override
	public String getErrorBg() {
		if (_errorBg == null) {
			return "";
		}
		else {
			return _errorBg;
		}
	}

	@Override
	public void setErrorBg(String errorBg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_errorBg = errorBg;
	}

	@JSON
	@Override
	public String getErrorLight() {
		if (_errorLight == null) {
			return "";
		}
		else {
			return _errorLight;
		}
	}

	@Override
	public void setErrorLight(String errorLight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_errorLight = errorLight;
	}

	@JSON
	@Override
	public String getErrorDark() {
		if (_errorDark == null) {
			return "";
		}
		else {
			return _errorDark;
		}
	}

	@Override
	public void setErrorDark(String errorDark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_errorDark = errorDark;
	}

	@JSON
	@Override
	public String getErrorDefault() {
		if (_errorDefault == null) {
			return "";
		}
		else {
			return _errorDefault;
		}
	}

	@Override
	public void setErrorDefault(String errorDefault) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_errorDefault = errorDefault;
	}

	@JSON
	@Override
	public String getErrorDisabled() {
		if (_errorDisabled == null) {
			return "";
		}
		else {
			return _errorDisabled;
		}
	}

	@Override
	public void setErrorDisabled(String errorDisabled) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_errorDisabled = errorDisabled;
	}

	@JSON
	@Override
	public String getWarningBg() {
		if (_warningBg == null) {
			return "";
		}
		else {
			return _warningBg;
		}
	}

	@Override
	public void setWarningBg(String warningBg) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_warningBg = warningBg;
	}

	@JSON
	@Override
	public String getWarningLight() {
		if (_warningLight == null) {
			return "";
		}
		else {
			return _warningLight;
		}
	}

	@Override
	public void setWarningLight(String warningLight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_warningLight = warningLight;
	}

	@JSON
	@Override
	public String getWarningDark() {
		if (_warningDark == null) {
			return "";
		}
		else {
			return _warningDark;
		}
	}

	@Override
	public void setWarningDark(String warningDark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_warningDark = warningDark;
	}

	@JSON
	@Override
	public String getWarningDefault() {
		if (_warningDefault == null) {
			return "";
		}
		else {
			return _warningDefault;
		}
	}

	@Override
	public void setWarningDefault(String warningDefault) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_warningDefault = warningDefault;
	}

	@JSON
	@Override
	public String getWarningDisabled() {
		if (_warningDisabled == null) {
			return "";
		}
		else {
			return _warningDisabled;
		}
	}

	@Override
	public void setWarningDisabled(String warningDisabled) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_warningDisabled = warningDisabled;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Themes.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Themes toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Themes>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ThemesImpl themesImpl = new ThemesImpl();

		themesImpl.setUuid(getUuid());
		themesImpl.setColorsId(getColorsId());
		themesImpl.setUserId(getUserId());
		themesImpl.setNeutralBlack(getNeutralBlack());
		themesImpl.setNeutralWhite(getNeutralWhite());
		themesImpl.setNeutralGray1(getNeutralGray1());
		themesImpl.setPrimaryBg(getPrimaryBg());
		themesImpl.setPrimaryLight(getPrimaryLight());
		themesImpl.setPrimaryDark(getPrimaryDark());
		themesImpl.setPrimaryDefault(getPrimaryDefault());
		themesImpl.setPrimaryDisabled(getPrimaryDisabled());
		themesImpl.setSecondaryBg(getSecondaryBg());
		themesImpl.setSecondaryLight(getSecondaryLight());
		themesImpl.setSecondaryDark(getSecondaryDark());
		themesImpl.setSecondaryDefault(getSecondaryDefault());
		themesImpl.setSecondaryDisabled(getSecondaryDisabled());
		themesImpl.setSuccessBg(getSuccessBg());
		themesImpl.setSuccessLight(getSuccessLight());
		themesImpl.setSuccessDark(getSuccessDark());
		themesImpl.setSuccessDefault(getSuccessDefault());
		themesImpl.setSuccessDisabled(getSuccessDisabled());
		themesImpl.setErrorBg(getErrorBg());
		themesImpl.setErrorLight(getErrorLight());
		themesImpl.setErrorDark(getErrorDark());
		themesImpl.setErrorDefault(getErrorDefault());
		themesImpl.setErrorDisabled(getErrorDisabled());
		themesImpl.setWarningBg(getWarningBg());
		themesImpl.setWarningLight(getWarningLight());
		themesImpl.setWarningDark(getWarningDark());
		themesImpl.setWarningDefault(getWarningDefault());
		themesImpl.setWarningDisabled(getWarningDisabled());

		themesImpl.resetOriginalValues();

		return themesImpl;
	}

	@Override
	public int compareTo(Themes themes) {
		long primaryKey = themes.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Themes)) {
			return false;
		}

		Themes themes = (Themes)object;

		long primaryKey = themes.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Themes> toCacheModel() {
		ThemesCacheModel themesCacheModel = new ThemesCacheModel();

		themesCacheModel.uuid = getUuid();

		String uuid = themesCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			themesCacheModel.uuid = null;
		}

		themesCacheModel.colorsId = getColorsId();

		themesCacheModel.userId = getUserId();

		themesCacheModel.neutralBlack = getNeutralBlack();

		String neutralBlack = themesCacheModel.neutralBlack;

		if ((neutralBlack != null) && (neutralBlack.length() == 0)) {
			themesCacheModel.neutralBlack = null;
		}

		themesCacheModel.neutralWhite = getNeutralWhite();

		String neutralWhite = themesCacheModel.neutralWhite;

		if ((neutralWhite != null) && (neutralWhite.length() == 0)) {
			themesCacheModel.neutralWhite = null;
		}

		themesCacheModel.neutralGray1 = getNeutralGray1();

		String neutralGray1 = themesCacheModel.neutralGray1;

		if ((neutralGray1 != null) && (neutralGray1.length() == 0)) {
			themesCacheModel.neutralGray1 = null;
		}

		themesCacheModel.primaryBg = getPrimaryBg();

		String primaryBg = themesCacheModel.primaryBg;

		if ((primaryBg != null) && (primaryBg.length() == 0)) {
			themesCacheModel.primaryBg = null;
		}

		themesCacheModel.primaryLight = getPrimaryLight();

		String primaryLight = themesCacheModel.primaryLight;

		if ((primaryLight != null) && (primaryLight.length() == 0)) {
			themesCacheModel.primaryLight = null;
		}

		themesCacheModel.primaryDark = getPrimaryDark();

		String primaryDark = themesCacheModel.primaryDark;

		if ((primaryDark != null) && (primaryDark.length() == 0)) {
			themesCacheModel.primaryDark = null;
		}

		themesCacheModel.primaryDefault = getPrimaryDefault();

		String primaryDefault = themesCacheModel.primaryDefault;

		if ((primaryDefault != null) && (primaryDefault.length() == 0)) {
			themesCacheModel.primaryDefault = null;
		}

		themesCacheModel.primaryDisabled = getPrimaryDisabled();

		String primaryDisabled = themesCacheModel.primaryDisabled;

		if ((primaryDisabled != null) && (primaryDisabled.length() == 0)) {
			themesCacheModel.primaryDisabled = null;
		}

		themesCacheModel.secondaryBg = getSecondaryBg();

		String secondaryBg = themesCacheModel.secondaryBg;

		if ((secondaryBg != null) && (secondaryBg.length() == 0)) {
			themesCacheModel.secondaryBg = null;
		}

		themesCacheModel.secondaryLight = getSecondaryLight();

		String secondaryLight = themesCacheModel.secondaryLight;

		if ((secondaryLight != null) && (secondaryLight.length() == 0)) {
			themesCacheModel.secondaryLight = null;
		}

		themesCacheModel.secondaryDark = getSecondaryDark();

		String secondaryDark = themesCacheModel.secondaryDark;

		if ((secondaryDark != null) && (secondaryDark.length() == 0)) {
			themesCacheModel.secondaryDark = null;
		}

		themesCacheModel.secondaryDefault = getSecondaryDefault();

		String secondaryDefault = themesCacheModel.secondaryDefault;

		if ((secondaryDefault != null) && (secondaryDefault.length() == 0)) {
			themesCacheModel.secondaryDefault = null;
		}

		themesCacheModel.secondaryDisabled = getSecondaryDisabled();

		String secondaryDisabled = themesCacheModel.secondaryDisabled;

		if ((secondaryDisabled != null) && (secondaryDisabled.length() == 0)) {
			themesCacheModel.secondaryDisabled = null;
		}

		themesCacheModel.successBg = getSuccessBg();

		String successBg = themesCacheModel.successBg;

		if ((successBg != null) && (successBg.length() == 0)) {
			themesCacheModel.successBg = null;
		}

		themesCacheModel.successLight = getSuccessLight();

		String successLight = themesCacheModel.successLight;

		if ((successLight != null) && (successLight.length() == 0)) {
			themesCacheModel.successLight = null;
		}

		themesCacheModel.successDark = getSuccessDark();

		String successDark = themesCacheModel.successDark;

		if ((successDark != null) && (successDark.length() == 0)) {
			themesCacheModel.successDark = null;
		}

		themesCacheModel.successDefault = getSuccessDefault();

		String successDefault = themesCacheModel.successDefault;

		if ((successDefault != null) && (successDefault.length() == 0)) {
			themesCacheModel.successDefault = null;
		}

		themesCacheModel.successDisabled = getSuccessDisabled();

		String successDisabled = themesCacheModel.successDisabled;

		if ((successDisabled != null) && (successDisabled.length() == 0)) {
			themesCacheModel.successDisabled = null;
		}

		themesCacheModel.errorBg = getErrorBg();

		String errorBg = themesCacheModel.errorBg;

		if ((errorBg != null) && (errorBg.length() == 0)) {
			themesCacheModel.errorBg = null;
		}

		themesCacheModel.errorLight = getErrorLight();

		String errorLight = themesCacheModel.errorLight;

		if ((errorLight != null) && (errorLight.length() == 0)) {
			themesCacheModel.errorLight = null;
		}

		themesCacheModel.errorDark = getErrorDark();

		String errorDark = themesCacheModel.errorDark;

		if ((errorDark != null) && (errorDark.length() == 0)) {
			themesCacheModel.errorDark = null;
		}

		themesCacheModel.errorDefault = getErrorDefault();

		String errorDefault = themesCacheModel.errorDefault;

		if ((errorDefault != null) && (errorDefault.length() == 0)) {
			themesCacheModel.errorDefault = null;
		}

		themesCacheModel.errorDisabled = getErrorDisabled();

		String errorDisabled = themesCacheModel.errorDisabled;

		if ((errorDisabled != null) && (errorDisabled.length() == 0)) {
			themesCacheModel.errorDisabled = null;
		}

		themesCacheModel.warningBg = getWarningBg();

		String warningBg = themesCacheModel.warningBg;

		if ((warningBg != null) && (warningBg.length() == 0)) {
			themesCacheModel.warningBg = null;
		}

		themesCacheModel.warningLight = getWarningLight();

		String warningLight = themesCacheModel.warningLight;

		if ((warningLight != null) && (warningLight.length() == 0)) {
			themesCacheModel.warningLight = null;
		}

		themesCacheModel.warningDark = getWarningDark();

		String warningDark = themesCacheModel.warningDark;

		if ((warningDark != null) && (warningDark.length() == 0)) {
			themesCacheModel.warningDark = null;
		}

		themesCacheModel.warningDefault = getWarningDefault();

		String warningDefault = themesCacheModel.warningDefault;

		if ((warningDefault != null) && (warningDefault.length() == 0)) {
			themesCacheModel.warningDefault = null;
		}

		themesCacheModel.warningDisabled = getWarningDisabled();

		String warningDisabled = themesCacheModel.warningDisabled;

		if ((warningDisabled != null) && (warningDisabled.length() == 0)) {
			themesCacheModel.warningDisabled = null;
		}

		return themesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Themes, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Themes, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Themes, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Themes)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Themes, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Themes, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Themes, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Themes)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Themes>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _colorsId;
	private long _userId;
	private String _neutralBlack;
	private String _neutralWhite;
	private String _neutralGray1;
	private String _primaryBg;
	private String _primaryLight;
	private String _primaryDark;
	private String _primaryDefault;
	private String _primaryDisabled;
	private String _secondaryBg;
	private String _secondaryLight;
	private String _secondaryDark;
	private String _secondaryDefault;
	private String _secondaryDisabled;
	private String _successBg;
	private String _successLight;
	private String _successDark;
	private String _successDefault;
	private String _successDisabled;
	private String _errorBg;
	private String _errorLight;
	private String _errorDark;
	private String _errorDefault;
	private String _errorDisabled;
	private String _warningBg;
	private String _warningLight;
	private String _warningDark;
	private String _warningDefault;
	private String _warningDisabled;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Themes, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Themes)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("colorsId", _colorsId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("neutralBlack", _neutralBlack);
		_columnOriginalValues.put("neutralWhite", _neutralWhite);
		_columnOriginalValues.put("neutralGray1", _neutralGray1);
		_columnOriginalValues.put("primaryBg", _primaryBg);
		_columnOriginalValues.put("primaryLight", _primaryLight);
		_columnOriginalValues.put("primaryDark", _primaryDark);
		_columnOriginalValues.put("primaryDefault", _primaryDefault);
		_columnOriginalValues.put("primaryDisabled", _primaryDisabled);
		_columnOriginalValues.put("secondaryBg", _secondaryBg);
		_columnOriginalValues.put("secondaryLight", _secondaryLight);
		_columnOriginalValues.put("secondaryDark", _secondaryDark);
		_columnOriginalValues.put("secondaryDefault", _secondaryDefault);
		_columnOriginalValues.put("secondaryDisabled", _secondaryDisabled);
		_columnOriginalValues.put("successBg", _successBg);
		_columnOriginalValues.put("successLight", _successLight);
		_columnOriginalValues.put("successDark", _successDark);
		_columnOriginalValues.put("successDefault", _successDefault);
		_columnOriginalValues.put("successDisabled", _successDisabled);
		_columnOriginalValues.put("errorBg", _errorBg);
		_columnOriginalValues.put("errorLight", _errorLight);
		_columnOriginalValues.put("errorDark", _errorDark);
		_columnOriginalValues.put("errorDefault", _errorDefault);
		_columnOriginalValues.put("errorDisabled", _errorDisabled);
		_columnOriginalValues.put("warningBg", _warningBg);
		_columnOriginalValues.put("warningLight", _warningLight);
		_columnOriginalValues.put("warningDark", _warningDark);
		_columnOriginalValues.put("warningDefault", _warningDefault);
		_columnOriginalValues.put("warningDisabled", _warningDisabled);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("colorsId", 2L);

		columnBitmasks.put("userId", 4L);

		columnBitmasks.put("neutralBlack", 8L);

		columnBitmasks.put("neutralWhite", 16L);

		columnBitmasks.put("neutralGray1", 32L);

		columnBitmasks.put("primaryBg", 64L);

		columnBitmasks.put("primaryLight", 128L);

		columnBitmasks.put("primaryDark", 256L);

		columnBitmasks.put("primaryDefault", 512L);

		columnBitmasks.put("primaryDisabled", 1024L);

		columnBitmasks.put("secondaryBg", 2048L);

		columnBitmasks.put("secondaryLight", 4096L);

		columnBitmasks.put("secondaryDark", 8192L);

		columnBitmasks.put("secondaryDefault", 16384L);

		columnBitmasks.put("secondaryDisabled", 32768L);

		columnBitmasks.put("successBg", 65536L);

		columnBitmasks.put("successLight", 131072L);

		columnBitmasks.put("successDark", 262144L);

		columnBitmasks.put("successDefault", 524288L);

		columnBitmasks.put("successDisabled", 1048576L);

		columnBitmasks.put("errorBg", 2097152L);

		columnBitmasks.put("errorLight", 4194304L);

		columnBitmasks.put("errorDark", 8388608L);

		columnBitmasks.put("errorDefault", 16777216L);

		columnBitmasks.put("errorDisabled", 33554432L);

		columnBitmasks.put("warningBg", 67108864L);

		columnBitmasks.put("warningLight", 134217728L);

		columnBitmasks.put("warningDark", 268435456L);

		columnBitmasks.put("warningDefault", 536870912L);

		columnBitmasks.put("warningDisabled", 1073741824L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Themes _escapedModel;

}